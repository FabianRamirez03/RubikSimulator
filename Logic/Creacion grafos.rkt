;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname |Creacion grafos|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))
(require 2htdp/batch-io)
(require racket/format)
;***********************************Creacion de cubo**********************************
;Funcion principal para crear el cubo
(define (create number)
  (write-file "cube.txt" (~a (createAux number 6)))
  )
;Funcion recursiva para la creacion de las 6 caras del cubo
(define (createAux number edges)
  (cond ((zero? edges) null)
        ((equal? edges 1) (cons (createMatrix number number 'W)(createAux number (- edges 1))))
        ((equal? edges 2) (cons (createMatrix number number 'B)(createAux number (- edges 1))))
        ((equal? edges 3) (cons (createMatrix number number 'R)(createAux number (- edges 1))))
        ((equal? edges 4) (cons (createMatrix number number 'Y)(createAux number (- edges 1))))
        ((equal? edges 5) (cons (createMatrix number number 'G)(createAux number (- edges 1))))
        ((equal? edges 6) (cons (createMatrix number number 'O)(createAux number (- edges 1))))
        )
   )
;Funcion recursiva para la creacion de las filas
(define (createMatrix numberL number color)
  (cond ((zero? numberL) '())
        (else
         (cons (createLine numberL number color) (createMatrix (- numberL 1) number color))
         )
        )
  )
;Funcion recursiva para la creacion de columnas 
(define (createLine numberL number color)
  (cond ((zero? number) '())
        (else
         (cons (list  number numberL color) (createLine numberL (- number 1) color))
        )
        )
  )

;Funcion principal para contar tamano del cubo
(define (Length cube)
  (lengthAux (caar cube))
  )
;Funcion recursiva para contar elementos de una lista
(define (lengthAux line)
  (cond ((null? line) 0)
        (else (+ (lengthAux (cdr line)) 1))
        )
  )
;**************************************** giro **********************************

(define (rotate num dir)
  (cond ((equal? dir 'U) (write-file "cube.txt" (~a (turn (changeCallC (stringtolistCube (read-1strings "cube.txt") '()) (sortCube (verticalRead (stringtolistCube (read-1strings "cube.txt") '()) num) '(5 1 2 4)) num '(1 2 4 5))))))
        ((equal? dir 'D) (write-file "cube.txt" (~a (turn (changeCallC (stringtolistCube (read-1strings "cube.txt") '()) (sortCube (verticalRead (stringtolistCube (read-1strings "cube.txt") '()) num) '(2 4 5 1)) num '(1 2 4 5))))))
        ((equal? dir 'L) (write-file "cube.txt" (~a (turn (changeCallR (stringtolistCube (read-1strings "cube.txt") '()) (sortCube (horizontalRead (stringtolistCube (read-1strings "cube.txt") '()) num) '(3 4 6 1)) num '(1 3 4 6))))))
        ((equal? dir 'R) (write-file "cube.txt" (~a (turn (changeCallR (stringtolistCube (read-1strings "cube.txt") '()) (sortCube (horizontalRead (stringtolistCube (read-1strings "cube.txt") '()) num) '(6 1 3 4)) num '(1 3 4 6))))))
        (else #f)
        )
  )
;(write-file "cube.txt" (~a (turn (changeCallR (stringtolistCube (read-1strings "cube.txt") '()) (sortCube (horizontalRead (stringtolistCube (read-1strings "cube.txt") '()) 1) '(1 5 2 6)) 1 '(5 2 6 1)))))
;Realiza lista con los elementos a mover verticalmente
(define (verticalRead cube num)
  (cond ((null? cube) null)
        (else (cons (verticalAux (car cube) num) (verticalRead (cdr cube) num)))
         )
  )
;Realiza la lista de los elementos a mover pero en una cara 
(define (verticalAux edge num)
  (cond ((null? edge) null)
        (else (cons (search (car edge) num 1) (verticalAux (cdr edge) num))) 
  )
  )
;Realiza lista con los elementos a mover horizontal
(define (horizontalRead cube num)
  (cond ((null? cube) null)
        (else (cons (search (car cube) num 1) (horizontalRead (cdr cube) num)))
        )
  )
;ordena de acuerdo al movimiento que se quiera realizar
(define (sortCube List change)
  (cond ((null? change) null)
        (else (cons (search List (car change) 1) (sortCube List (cdr change))))
        )
  )
;Busca elemento segun la columna o fila
(define (search List numSearch num)
  (cond ((equal? numSearch num) (car List))
        (else (search (cdr List) numSearch (+ num 1)))
        )
  )
;Llama segun el movimiento cada fila para acomodar
(define (changeCallR cube List numChange numList)
  (cond((null? numList) cube)
       (else (changeCallR (rowChange cube List numChange (car numList) 1) (cdr List) numChange (cdr numList)))
       )
  )
;Acomoda el cubo cambiandole la fila a la que le dieron vuelta
(define (rowChange cube List numChange numList num)
  (cond((null? cube) null)
       ((equal? numList num) (cons (rChanAux (car List) (car cube) numChange 1 (+ (Length cube) 1)) (rowChange (cdr cube) (cdr List) numChange numList (+ num 1))))
       (else(cons (car cube) (rowChange (cdr cube) List numChange  numList (+ num 1)))
             )
       )
  )
;Auxiliar recursica que cambia la fila o columna en el cubo que se le ha dado vuelta
(define (rChanAux List edge numChange num size)
  (cond((equal? num size) null)
       ((equal? numChange num) (cons List (rChanAux List (cdr edge) numChange (+ num 1) size)))
       (else (cons (car edge) (rChanAux List (cdr edge) numChange (+ num 1) size))
             )
       )
  )
;Funcion de cola para ir girando el cubo
(define (changeCallC cube List numChange numList)
  (cond((null? numList) cube)
       (else (changeCallC (columnChange cube List numChange (car numList) 1) (cdr List) numChange (cdr numList)))
       )
  )
;Toma la cara a la que se le debe de dar vuelta
(define (columnChange cube List numChange numList num)
  (cond((null? cube) null)
       ((equal? numList num) (cons (columnChanAux (car List) (car cube) numChange cube) (columnChange (cdr cube) (cdr List) numChange numList (+ num 1))))
       (else (cons (car cube) (columnChange (cdr cube) List numChange numList (+ num 1))))
       )
  )
;Toma cada fila para cambiarle la columna deseada
(define (columnChanAux List edge numChange cube)
  (cond((null? edge) null)
       (else(cons (rChanAux (car List) (car edge) numChange 1 (+ (Length cube) 1)) (columnChanAux (cdr List) (cdr edge) numChange cube)))
       )
  )

;***********************************************Girar cubo****************************************************

(define (girar dir)
  (cond((equal? dir 'U) (write-file "cube.txt" (~a (turn (moveEdge (stringtolistCube (read-1strings "cube.txt") '()) (stringtolistCube (read-1strings "cube.txt") '()) '(5 1 3 2 4 6) 1)))))
       ((equal? dir 'D) (write-file "cube.txt" (~a (turn (moveEdge (stringtolistCube (read-1strings "cube.txt") '()) (stringtolistCube (read-1strings "cube.txt") '()) '(2 4 3 5 1 6) 1)))))
       ((equal? dir 'L) (write-file "cube.txt" (~a (turn (moveEdge (stringtolistCube (read-1strings "cube.txt") '()) (stringtolistCube (read-1strings "cube.txt") '()) '(3 2 4 6 5 1) 1)))))
       ((equal? dir 'R) (write-file "cube.txt" (~a (turn (moveEdge (stringtolistCube (read-1strings "cube.txt") '()) (stringtolistCube (read-1strings "cube.txt") '()) '(6 2 1 3 5 4) 1)))))
       )
  )

(define (moveEdge cubeChange cube List cont)
  (cond ((null? List) null)
        ((equal? (car List) cont) (cons (car cubeChange) (moveEdge cube cube (cdr List) 1)))
        (else(moveEdge (cdr cubeChange) cube List (+ cont 1))
             )
        )
  )

;*****************************************string to list*************************************8
(define (stringtolistCube List cube)
  (cond((equal? (car List) ")") cube)
       ((equal? (car List) " ") (stringtolistCube (cdr List) cube))
       (else (stringtolistEdge (cdr List) cube '()))))

(define (stringtolistEdge List cube edge)
  (cond((equal? (car List) ")") (stringtolistCube (cdr List) (cons edge cube)))
       ((equal? (car List) " ") (stringtolistEdge (cdr List) cube edge))
       (else (stringtolistRow (cdr List) cube edge '()))
       ))
(define (stringtolistRow List cube edge row)
  (cond((equal? (car List) ")") (stringtolistEdge (cdr List) cube (cons row edge)))
       ((equal? (car List) " ") (stringtolistRow (cdr List) cube edge row))
       (else (stringtolistColumn (cdr List) cube edge row '()))
  ))
(define (stringtolistColumn List cube edge row column)
  (cond((equal? (car List) ")") (stringtolistRow (cdr List) cube edge (cons column row)))
       ((equal? (car List) " ") (stringtolistColumn (cdr List) cube edge row column))
       ((equal? (car List) "(") (stringtolistColumn (cdr List) cube edge row column))
       (else (stringtolistColumn (cdr List) cube edge row (cons (car List) column)))
  ))
  
(define (turn cube)
  (cond((null? cube) null)
       ((string? (car cube)) (append (turn (cdr cube)) (list (car cube))))
       (else (append (turn (cdr cube)) (list (turn (car cube)))))
  ))